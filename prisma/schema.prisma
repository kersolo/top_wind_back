
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}


model User {
  id            String   @id @default(uuid())
  email         String   @unique @db.VarChar(100)
  password      String   @db.VarChar(100)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  profile       Profile?
  board         Board[]
  sail          Sail[]
  mast          Mast[]
  wishbone      Wishbone[]
}

model Profile{
  userId        String   @id @unique 
  firstname     String   @db.VarChar(50)
  lastname      String   @db.VarChar(50)
  pseudo        String   @db.VarChar(20)
  avatarPath    String?  @db.VarChar(255)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User     @relation(fields: [userId], references:[id], onDelete: Cascade, onUpdate: Cascade)
}

model Board{
  id            Int      @default(autoincrement()) @id
  brand         String
  name          String
  year          String
  liter         Int
  activity      ActivityEnum?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  userId        String
  user          User     @relation(fields: [userId], references:[id], onDelete: Cascade, onUpdate: Cascade)
  }

model Sail{
  id            Int      @default(autoincrement()) @id
  brand         String
  name          String
  year          String
  size          Float
  activity      ActivityEnum?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  userId        String
  user          User     @relation(fields: [userId], references:[id], onDelete: Cascade, onUpdate: Cascade)
  }

model Mast{
  id            Int      @default(autoincrement()) @id
  brand         String
  name          String
  year          String
  size          Float
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  userId        String
  user          User     @relation(fields: [userId], references:[id], onDelete: Cascade, onUpdate: Cascade)
  }

model Wishbone{
  id            Int      @default(autoincrement()) @id
  brand         String
  name          String
  year          String
  size          Float
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  userId        String
  user          User     @relation(fields: [userId], references:[id], onDelete: Cascade, onUpdate: Cascade)
  }


  enum ActivityEnum {
    Freeride
    Slalom
    Wave
    Freestyle
}